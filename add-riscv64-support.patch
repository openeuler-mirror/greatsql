diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0e758944..33c161bd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -486,6 +486,7 @@ SET(KNOWN_64BIT_ARCHITECTURES
   ppc64le
   s390x
   x86_64
+  riscv64
 )
 
 # Include the platform-specific file. To allow exceptions, this code
diff --git a/include/my_rdtsc.h b/include/my_rdtsc.h
index 52102ba9..bc8d638c 100644
--- a/include/my_rdtsc.h
+++ b/include/my_rdtsc.h
@@ -128,5 +128,6 @@ void my_timer_init(MY_TIMER_INFO *mti);
 #define MY_TIMER_ROUTINE_GETSYSTEMTIMEASFILETIME 26
 #define MY_TIMER_ROUTINE_ASM_SUNPRO_X86_64 27
 #define MY_TIMER_ROUTINE_ASM_AARCH64 28
+#define MY_TIMER_ROUTINE_ASM_RISCV64 30
 
 #endif
diff --git a/mysys/my_rdtsc.cc b/mysys/my_rdtsc.cc
index 7c6b255e..d9ff417f 100644
--- a/mysys/my_rdtsc.cc
+++ b/mysys/my_rdtsc.cc
@@ -203,6 +203,12 @@ ulonglong my_timer_cycles(void) {
     __asm __volatile__("mrs %[rt],cntvct_el0" : [ rt ] "=r"(result));
     return result;
   }
+#elif defined(__GNUC__) && defined(__riscv) && __riscv_xlen == 64
+  {
+    ulonglong result;
+    __asm__ __volatile__ ("rdcycle %0" : "=r" (result) :: "memory");
+    return result;
+  }
 #elif defined(HAVE_SYS_TIMES_H) && defined(HAVE_GETHRTIME)
   /* gethrtime may appear as either cycle or nanosecond counter */
   return (ulonglong)gethrtime();
@@ -504,6 +510,8 @@ void my_timer_init(MY_TIMER_INFO *mti) {
   mti->cycles.routine = MY_TIMER_ROUTINE_ASM_GCC_SPARC32;
 #elif defined(__GNUC__) && defined(__aarch64__)
   mti->cycles.routine = MY_TIMER_ROUTINE_ASM_AARCH64;
+#elif defined(__GNUC__) && defined(__riscv) && __riscv_xlen == 64
+  mti->cycles.routine = MY_TIMER_ROUTINE_ASM_RISCV64;
 #elif defined(HAVE_SYS_TIMES_H) && defined(HAVE_GETHRTIME)
   mti->cycles.routine = MY_TIMER_ROUTINE_GETHRTIME;
 #else
